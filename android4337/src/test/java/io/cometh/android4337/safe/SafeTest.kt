package io.cometh.android4337.safe

import io.cometh.android4337.passkey.PassKey
import io.cometh.android4337.passkey.SafeSignature
import io.cometh.android4337.utils.hexToAddress
import io.cometh.android4337.utils.hexToBigInt
import io.cometh.android4337.utils.toHex
import org.junit.Assert
import org.junit.Test

class SafeTest {

    val config = SafeConfig.createDefaultConfig()
    val x = "0x9e5261b7f1e14fb9f3135053c093e4d95c8ea94fb6e761621f7c2cf13d36ccda".hexToBigInt()
    val y = "0xe2190ee5f1ec2959e848c540f7f5d1c843bc45200158f46e6f984d258aae4b6e".hexToBigInt()
    val passKey = PassKey(x, y)

    @Test
    fun getEnableModulesFunctionData() {
        val expected =
            "0x8d0dc49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c226"
        Safe.getEnableModulesFunctionData(
            listOf(config.getSafe4337ModuleAddress())
        ).let {
            Assert.assertEquals(expected, it.toHex())
        }
    }

    @Test
    fun getSharedSignerConfigureCallData() {
        val expected =
            "0x0dd9692f9e5261b7f1e14fb9f3135053c093e4d95c8ea94fb6e761621f7c2cf13d36ccdae2190ee5f1ec2959e848c540f7f5d1c843bc45200158f46e6f984d258aae4b6e000000000000000000000000445a0683e494ea0c5af3e83c5159fbe47cf9e765"
        val verifiers = config.safeP256VerifierAddress.hexToBigInt()
        val data = Safe.getSharedSignerConfigureCallData(x, y, verifiers)
        Assert.assertEquals(expected, data.toHex())
    }

    @Test
    fun getMultiSendFunctionData() {
        val expected =
            "0x8d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172012dd68b007b46fbe91b9a7c3eda5a7a1063cb5b47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c22601fd90fad33ee8b58f32c00aceead1358e4afc23f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f9e5261b7f1e14fb9f3135053c093e4d95c8ea94fb6e761621f7c2cf13d36ccdae2190ee5f1ec2959e848c540f7f5d1c843bc45200158f46e6f984d258aae4b6e000000000000000000000000445a0683e494ea0c5af3e83c5159fbe47cf9e7650000000000000000000000000000"
        Safe.getMultiSendFunctionData(
            safeModuleSetupAddress = config.getSafeModuleSetupAddress(),
            safeWebAuthnSharedSignerAddress = config.getSafeWebAuthnSharedSignerAddress(),
            enableModuleData = Safe.getEnableModulesFunctionData(listOf(config.getSafe4337ModuleAddress())),
            sharedSignerConfigureData = Safe.getSharedSignerConfigureCallData(
                x = x, y = y, verifiers = config.safeP256VerifierAddress.hexToBigInt()
            )
        ).let {
            Assert.assertEquals(expected, it.toHex())
        }
    }


    @Test
    fun getSafeInitializer() {
        val address = "0x2f920a66C2f9760f6fE5F49b289322Ddf60f9103"
        val initializer = Safe.getSafeInitializer(
            address.hexToAddress(), config, passKey
        )
        Assert.assertEquals(
            "0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b526000000000000000000000000000000000000000000000000000000000000016000000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c2260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd90fad33ee8b58f32c00aceead1358e4afc23f90000000000000000000000002f920a66c2f9760f6fe5f49b289322ddf60f910300000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172012dd68b007b46fbe91b9a7c3eda5a7a1063cb5b47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c22601fd90fad33ee8b58f32c00aceead1358e4afc23f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f9e5261b7f1e14fb9f3135053c093e4d95c8ea94fb6e761621f7c2cf13d36ccdae2190ee5f1ec2959e848c540f7f5d1c843bc45200158f46e6f984d258aae4b6e000000000000000000000000445a0683e494ea0c5af3e83c5159fbe47cf9e765000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            initializer.toHex()
        )

    }

    @Test
    fun buildSignatureBytes() {
        val signatureBytes = Safe.buildSignatureBytes(
            listOf(
                SafeSignature(
                    signer = "0xfD90FAd33ee8b58f32c00aceEad1358e4AFC23f9",
                    data = "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e087962dc26299acf4b4f36bd1260a9911c1ffdaa2a50f3ce977881d2dc7a8a699b86ec26d1ea41faf56715ddd0c3f1490f5e11e53285ef693fe57c69742c5e583000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1226f726967696e223a22687474703a2f2f6c6f63616c686f73743a35313734222c2263726f73734f726967696e223a66616c73652c226f746865725f6b6579735f63616e5f62655f61646465645f68657265223a22646f206e6f7420636f6d7061726520636c69656e74446174614a534f4e20616761696e737420612074656d706c6174652e205365652068747470733a2f2f676f6f2e676c2f7961625065782200000000000000000000000000000000000000000000000000000000000000",
                    dynamic = true
                )
            )
        )
        Assert.assertEquals(
            "0x000000000000000000000000fD90FAd33ee8b58f32c00aceEad1358e4AFC23f900000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e087962dc26299acf4b4f36bd1260a9911c1ffdaa2a50f3ce977881d2dc7a8a699b86ec26d1ea41faf56715ddd0c3f1490f5e11e53285ef693fe57c69742c5e583000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1226f726967696e223a22687474703a2f2f6c6f63616c686f73743a35313734222c2263726f73734f726967696e223a66616c73652c226f746865725f6b6579735f63616e5f62655f61646465645f68657265223a22646f206e6f7420636f6d7061726520636c69656e74446174614a534f4e20616761696e737420612074656d706c6174652e205365652068747470733a2f2f676f6f2e676c2f7961625065782200000000000000000000000000000000000000000000000000000000000000",
            signatureBytes
        )
    }


}